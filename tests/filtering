=====================
autotagical.filtering
=====================

Setup
=====
Initialize structures, silence logging, and import all functions.

Logging
-------
Silence logging, as a lot of tests will deliberate do things that result in errors/warnings.

>>> import logging
>>> logging.basicConfig(level=logging.CRITICAL)

Test Groups
-----------
Set up a basic tag groups object.

>>> from autotagical.groups import AutotagicalGroups
>>> test_groups = AutotagicalGroups()
>>> test_groups.load_tag_groups(
...   {
...     "file_type": "autotagical_tag_groups",
...     "tag_group_file_version": "1.1",
...     "tag_groups": [
...       {
...         "name": "American Styles",
...         "tags": [
...           "ipa",
...           "dipa",
...           "pale_ale"
...         ]
...       },
...       {
...         "name": "Belgian Styles",
...         "tags": [
...           "witbier",
...           "dubbel",
...           "tripel"
...         ]
...       },
...       {
...         "name": "Beer",
...         "tags": [
...           "/G|American Styles",
...           "/G|Belgian Styles"
...         ]
...       },
...       {
...         "name": "Whisky",
...         "tags": [
...           "bourbon",
...           "rye",
...           "scotch"
...         ]
...       }
...     ]
...   })
True
>>> test_groups.process_groups()

Test Tags
---------
Set up basic tags.

>>> test_tags_1 = ['dipa', 'ale', 'refrigerated', 'simcoe', 'ctz', 'centennial']
>>> test_tags_2 = ['pale_ale', 'ale', 'refrigerated', 'cascade']
>>> test_tags_3 = ['tripel', 'ale', 'refrigerated']
>>> test_tags_4 = ['scotch', 'laphroaig', 'islay']
>>> test_tags_5 = ['bourbon', '23_year', 'pappys']
>>> test_tags_6 = ['non-alcoholic', 'refrigerated']

Import Functions
----------------

>>> from autotagical.filtering import split_condition_set_to_conditions, check_condition, check_against_condition_set, check_against_filter

split_condition_set_to_conditions(condition_set)
========================================
Takes a condition_set and splits it at the and operator: /&|  This function warns if it encounters what looks to be a malformed condition_set.

Base Cases
----------
* Empty.  This should throw a warning (to logs) but not fail.

>>> split_condition_set_to_conditions('')
[]

* No operators at all.

>>> split_condition_set_to_conditions('scotch')
['scotch']

* No /&| operators but with other special operators.

>>> split_condition_set_to_conditions('/G|Whisky')
['/G|Whisky']
>>> split_condition_set_to_conditions('/*|')
['/*|']
>>> split_condition_set_to_conditions('/!|ale')
['/!|ale']

Single /&| Operator
-------------------

* No other operators at all.

>>> split_condition_set_to_conditions('refrigerated/&|dipa')
['refrigerated', 'dipa']

* With other operators.

>>> split_condition_set_to_conditions('/G|American Styles/&|/!|dipa')
['/G|American Styles', '/!|dipa']
>>> split_condition_set_to_conditions('/G|American Styles/&|/!|/*|')
['/G|American Styles', '/!|/*|']

Multiple /&| Operators
----------------------

* No other operators at all.

>>> split_condition_set_to_conditions('ale/&|refrigerated/&|cascade')
['ale', 'refrigerated', 'cascade']

* With other operators.

>>> split_condition_set_to_conditions('ale/&|/!|refrigerated/&|/G|American Styles')
['ale', '/!|refrigerated', '/G|American Styles']

Malformed Condition Sets
------------------------
These should throw warnings (to logs) but not fail.

* Missing tag after/before/between /&|.

>>> split_condition_set_to_conditions('bad filter/&|')
['bad filter']
>>> split_condition_set_to_conditions('/&|bad filter')
['bad filter']
>>> split_condition_set_to_conditions('bad filter/&|/&|still bad')
['bad filter', 'still bad']

check_condition(tag_array, condition, tag_groups)
=================================================
Takes a list of tags, a single condition to check against, and an *AutotagicalGroups* object and determines whether or not the tags match the condition.

Base Cases
----------

* Empty condition; should throw an exception.

>>> check_condition(test_tags_1, '', test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition encountered: ""

* Single tag.

>>> check_condition(test_tags_1, 'refrigerated', test_groups)
True
>>> check_condition(test_tags_2, 'refrigerated', test_groups)
True
>>> check_condition(test_tags_3, 'refrigerated', test_groups)
True
>>> check_condition(test_tags_4, 'refrigerated', test_groups)
False
>>> check_condition(test_tags_5, 'refrigerated', test_groups)
False
>>> check_condition(test_tags_6, 'refrigerated', test_groups)
True

Group (/G|) Operator
-----------------------

>>> check_condition(test_tags_1, '/G|Whisky', test_groups)
False
>>> check_condition(test_tags_2, '/G|Whisky', test_groups)
False
>>> check_condition(test_tags_3, '/G|Whisky', test_groups)
False
>>> check_condition(test_tags_4, '/G|Whisky', test_groups)
True
>>> check_condition(test_tags_5, '/G|Whisky', test_groups)
True
>>> check_condition(test_tags_6, '/G|Whisky', test_groups)
False

All (/\*|) Operator
-------------------

>>> check_condition(test_tags_1, '/*|', test_groups)
True
>>> check_condition(test_tags_2, '/*|', test_groups)
True
>>> check_condition(test_tags_3, '/*|', test_groups)
True
>>> check_condition(test_tags_4, '/*|', test_groups)
True
>>> check_condition(test_tags_5, '/*|', test_groups)
True
>>> check_condition(test_tags_6, '/*|', test_groups)
True

Not (/!|) Operator
------------------

* Negate tags.

>>> check_condition(test_tags_1, '/!|ale', test_groups)
False
>>> check_condition(test_tags_2, '/!|ale', test_groups)
False
>>> check_condition(test_tags_3, '/!|ale', test_groups)
False
>>> check_condition(test_tags_4, '/!|ale', test_groups)
True
>>> check_condition(test_tags_5, '/!|ale', test_groups)
True
>>> check_condition(test_tags_6, '/!|ale', test_groups)
True

* Negate all operator.

>>> check_condition(test_tags_1, '/!|/*|', test_groups)
False
>>> check_condition(test_tags_2, '/!|/*|', test_groups)
False
>>> check_condition(test_tags_3, '/!|/*|', test_groups)
False
>>> check_condition(test_tags_4, '/!|/*|', test_groups)
False
>>> check_condition(test_tags_5, '/!|/*|', test_groups)
False
>>> check_condition(test_tags_6, '/!|/*|', test_groups)
False

* Negate group conditions.

>>> check_condition(test_tags_1, '/!|/G|American Styles', test_groups)
False
>>> check_condition(test_tags_2, '/!|/G|American Styles', test_groups)
False
>>> check_condition(test_tags_3, '/!|/G|American Styles', test_groups)
True
>>> check_condition(test_tags_4, '/!|/G|American Styles', test_groups)
True
>>> check_condition(test_tags_5, '/!|/G|American Styles', test_groups)
True
>>> check_condition(test_tags_6, '/!|/G|American Styles', test_groups)
True

"Bad" Cases
-----------

* Tag groups that don't exist.

>>> check_condition(test_tags_1, '/G|nogroup', test_groups)
False
>>> check_condition(test_tags_2, '/G|nogroup', test_groups)
False
>>> check_condition(test_tags_3, '/G|nogroup', test_groups)
False
>>> check_condition(test_tags_4, '/G|nogroup', test_groups)
False
>>> check_condition(test_tags_5, '/G|nogroup', test_groups)
False
>>> check_condition(test_tags_6, '/G|nogroup', test_groups)
False
>>> check_condition(test_tags_1, '/!|/G|nogroup', test_groups)
True
>>> check_condition(test_tags_2, '/!|/G|nogroup', test_groups)
True
>>> check_condition(test_tags_3, '/!|/G|nogroup', test_groups)
True
>>> check_condition(test_tags_4, '/!|/G|nogroup', test_groups)
True
>>> check_condition(test_tags_5, '/!|/G|nogroup', test_groups)
True
>>> check_condition(test_tags_6, '/!|/G|nogroup', test_groups)
True

* Bad operator order (should throw exception).

>>> check_condition(test_tags_1, '/G|/!|thisiswrong', test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition encountered: "/G|/!|thisiswrong"
>>> check_condition(test_tags_1, 'thisiswrong/*|', test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition encountered: "thisiswrong/*|"
>>> check_condition(test_tags_1, 'thisiswrong/!|', test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition encountered: "thisiswrong/!|"

check_against_condition_set(tag_array, condition_set, tag_groups)
=================================================================
Takes a list of tags, a condition set, and and an *AutotagicalGroups* object and determines whether or not the tags match the condition set.

* Empty condition set; should throw an exception.

>>> check_against_condition_set(test_tags_1, '', test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition set encountered: Completely empty!

* Single tag.

>>> check_against_condition_set(test_tags_1, 'refrigerated', test_groups)
True
>>> check_against_condition_set(test_tags_2, 'refrigerated', test_groups)
True
>>> check_against_condition_set(test_tags_3, 'refrigerated', test_groups)
True
>>> check_against_condition_set(test_tags_4, 'refrigerated', test_groups)
False
>>> check_against_condition_set(test_tags_5, 'refrigerated', test_groups)
False
>>> check_against_condition_set(test_tags_6, 'refrigerated', test_groups)
True

Group (/G|) Operator
-----------------------

>>> check_against_condition_set(test_tags_1, '/G|Whisky', test_groups)
False
>>> check_against_condition_set(test_tags_2, '/G|Whisky', test_groups)
False
>>> check_against_condition_set(test_tags_3, '/G|Whisky', test_groups)
False
>>> check_against_condition_set(test_tags_4, '/G|Whisky', test_groups)
True
>>> check_against_condition_set(test_tags_5, '/G|Whisky', test_groups)
True
>>> check_against_condition_set(test_tags_6, '/G|Whisky', test_groups)
False

All (/\*|) Operator
-------------------

>>> check_against_condition_set(test_tags_1, '/*|', test_groups)
True
>>> check_against_condition_set(test_tags_2, '/*|', test_groups)
True
>>> check_against_condition_set(test_tags_3, '/*|', test_groups)
True
>>> check_against_condition_set(test_tags_4, '/*|', test_groups)
True
>>> check_against_condition_set(test_tags_5, '/*|', test_groups)
True
>>> check_against_condition_set(test_tags_6, '/*|', test_groups)
True

Not (/!|) Operator
------------------

* Negate tags.

>>> check_against_condition_set(test_tags_1, '/!|ale', test_groups)
False
>>> check_against_condition_set(test_tags_2, '/!|ale', test_groups)
False
>>> check_against_condition_set(test_tags_3, '/!|ale', test_groups)
False
>>> check_against_condition_set(test_tags_4, '/!|ale', test_groups)
True
>>> check_against_condition_set(test_tags_5, '/!|ale', test_groups)
True
>>> check_against_condition_set(test_tags_6, '/!|ale', test_groups)
True

* Negate all operator.

>>> check_against_condition_set(test_tags_1, '/!|/*|', test_groups)
False
>>> check_against_condition_set(test_tags_2, '/!|/*|', test_groups)
False
>>> check_against_condition_set(test_tags_3, '/!|/*|', test_groups)
False
>>> check_against_condition_set(test_tags_4, '/!|/*|', test_groups)
False
>>> check_against_condition_set(test_tags_5, '/!|/*|', test_groups)
False
>>> check_against_condition_set(test_tags_6, '/!|/*|', test_groups)
False

* Negate group conditions.

>>> check_against_condition_set(test_tags_1, '/!|/G|American Styles', test_groups)
False
>>> check_against_condition_set(test_tags_2, '/!|/G|American Styles', test_groups)
False
>>> check_against_condition_set(test_tags_3, '/!|/G|American Styles', test_groups)
True
>>> check_against_condition_set(test_tags_4, '/!|/G|American Styles', test_groups)
True
>>> check_against_condition_set(test_tags_5, '/!|/G|American Styles', test_groups)
True
>>> check_against_condition_set(test_tags_6, '/!|/G|American Styles', test_groups)
True

And (/&|) Operator
------------------

* Single with tags.

>>> check_against_condition_set(test_tags_1, 'ale/&|tripel', test_groups)
False
>>> check_against_condition_set(test_tags_2, 'ale/&|tripel', test_groups)
False
>>> check_against_condition_set(test_tags_3, 'ale/&|tripel', test_groups)
True
>>> check_against_condition_set(test_tags_4, 'ale/&|tripel', test_groups)
False
>>> check_against_condition_set(test_tags_5, 'ale/&|tripel', test_groups)
False
>>> check_against_condition_set(test_tags_6, 'ale/&|tripel', test_groups)
False

* Multiple And's.

>>> check_against_condition_set(test_tags_1, 'ale/&|refrigerated/&|cascade', test_groups)
False
>>> check_against_condition_set(test_tags_2, 'ale/&|refrigerated/&|cascade', test_groups)
True
>>> check_against_condition_set(test_tags_3, 'ale/&|refrigerated/&|cascade', test_groups)
False
>>> check_against_condition_set(test_tags_4, 'ale/&|refrigerated/&|cascade', test_groups)
False
>>> check_against_condition_set(test_tags_5, 'ale/&|refrigerated/&|cascade', test_groups)
False
>>> check_against_condition_set(test_tags_6, 'ale/&|refrigerated/&|cascade', test_groups)
False

* Combinations of operators.

>>> check_against_condition_set(test_tags_1, '/G|Beer/&|/!|dipa', test_groups)
False
>>> check_against_condition_set(test_tags_2, '/G|Beer/&|/!|dipa', test_groups)
True
>>> check_against_condition_set(test_tags_3, '/G|Beer/&|/!|dipa', test_groups)
True
>>> check_against_condition_set(test_tags_4, '/G|Beer/&|/!|dipa', test_groups)
False
>>> check_against_condition_set(test_tags_5, '/G|Beer/&|/!|dipa', test_groups)
False
>>> check_against_condition_set(test_tags_6, '/G|Beer/&|/!|dipa', test_groups)
False
>>> check_against_condition_set(test_tags_1, '/G|American Styles/&|/!|/*|', test_groups)
False
>>> check_against_condition_set(test_tags_2, '/G|American Styles/&|/!|/*|', test_groups)
False
>>> check_against_condition_set(test_tags_3, '/G|American Styles/&|/!|/*|', test_groups)
False
>>> check_against_condition_set(test_tags_4, '/G|American Styles/&|/!|/*|', test_groups)
False
>>> check_against_condition_set(test_tags_5, '/G|American Styles/&|/!|/*|', test_groups)
False
>>> check_against_condition_set(test_tags_6, '/G|American Styles/&|/!|/*|', test_groups)
False

"Bad" Cases
-----------

* Tag groups that don't exist.

>>> check_against_condition_set(test_tags_1, '/G|nogroup', test_groups)
False
>>> check_against_condition_set(test_tags_2, '/G|nogroup', test_groups)
False
>>> check_against_condition_set(test_tags_3, '/G|nogroup', test_groups)
False
>>> check_against_condition_set(test_tags_4, '/G|nogroup', test_groups)
False
>>> check_against_condition_set(test_tags_5, '/G|nogroup', test_groups)
False
>>> check_against_condition_set(test_tags_6, '/G|nogroup', test_groups)
False
>>> check_against_condition_set(test_tags_1, '/!|/G|nogroup', test_groups)
True
>>> check_against_condition_set(test_tags_2, '/!|/G|nogroup', test_groups)
True
>>> check_against_condition_set(test_tags_3, '/!|/G|nogroup', test_groups)
True
>>> check_against_condition_set(test_tags_4, '/!|/G|nogroup', test_groups)
True
>>> check_against_condition_set(test_tags_5, '/!|/G|nogroup', test_groups)
True
>>> check_against_condition_set(test_tags_6, '/!|/G|nogroup', test_groups)
True

* Bad operator order (should throw exception).

>>> check_against_condition_set(test_tags_1, '/G|/!|thisiswrong', test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition encountered: "/G|/!|thisiswrong"
>>> check_against_condition_set(test_tags_1, 'thisiswrong/*|', test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition encountered: "thisiswrong/*|"
>>> check_against_condition_set(test_tags_1, 'thisiswrong/!|', test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition encountered: "thisiswrong/!|"

check_against_filter(tag_array, check_filter, tag_groups)
=========================================================
Takes a list of tags, a filter, and and an *AutotagicalGroups* object and determines whether or not the tags match the filter.

* Empty filter; should throw an exception.

>>> check_against_filter(test_tags_1, [], test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed filter encountered: Completely empty!

* Single tag.

>>> check_against_filter(test_tags_1, ['refrigerated'], test_groups)
True
>>> check_against_filter(test_tags_2, ['refrigerated'], test_groups)
True
>>> check_against_filter(test_tags_3, ['refrigerated'], test_groups)
True
>>> check_against_filter(test_tags_4, ['refrigerated'], test_groups)
False
>>> check_against_filter(test_tags_5, ['refrigerated'], test_groups)
False
>>> check_against_filter(test_tags_6, ['refrigerated'], test_groups)
True

Group (/G|) Operator
-----------------------

>>> check_against_filter(test_tags_1, ['/G|Whisky'], test_groups)
False
>>> check_against_filter(test_tags_2, ['/G|Whisky'], test_groups)
False
>>> check_against_filter(test_tags_3, ['/G|Whisky'], test_groups)
False
>>> check_against_filter(test_tags_4, ['/G|Whisky'], test_groups)
True
>>> check_against_filter(test_tags_5, ['/G|Whisky'], test_groups)
True
>>> check_against_filter(test_tags_6, ['/G|Whisky'], test_groups)
False

All (/\*|) Operator
-------------------

>>> check_against_filter(test_tags_1, ['/*|'], test_groups)
True
>>> check_against_filter(test_tags_2, ['/*|'], test_groups)
True
>>> check_against_filter(test_tags_3, ['/*|'], test_groups)
True
>>> check_against_filter(test_tags_4, ['/*|'], test_groups)
True
>>> check_against_filter(test_tags_5, ['/*|'], test_groups)
True
>>> check_against_filter(test_tags_6, ['/*|'], test_groups)
True

Not (/!|) Operator
------------------

* Negate tags.

>>> check_against_filter(test_tags_1, ['/!|ale'], test_groups)
False
>>> check_against_filter(test_tags_2, ['/!|ale'], test_groups)
False
>>> check_against_filter(test_tags_3, ['/!|ale'], test_groups)
False
>>> check_against_filter(test_tags_4, ['/!|ale'], test_groups)
True
>>> check_against_filter(test_tags_5, ['/!|ale'], test_groups)
True
>>> check_against_filter(test_tags_6, ['/!|ale'], test_groups)
True

* Negate all operator.

>>> check_against_filter(test_tags_1, ['/!|/*|'], test_groups)
False
>>> check_against_filter(test_tags_2, ['/!|/*|'], test_groups)
False
>>> check_against_filter(test_tags_3, ['/!|/*|'], test_groups)
False
>>> check_against_filter(test_tags_4, ['/!|/*|'], test_groups)
False
>>> check_against_filter(test_tags_5, ['/!|/*|'], test_groups)
False
>>> check_against_filter(test_tags_6, ['/!|/*|'], test_groups)
False

* Negate group conditions.

>>> check_against_filter(test_tags_1, ['/!|/G|American Styles'], test_groups)
False
>>> check_against_filter(test_tags_2, ['/!|/G|American Styles'], test_groups)
False
>>> check_against_filter(test_tags_3, ['/!|/G|American Styles'], test_groups)
True
>>> check_against_filter(test_tags_4, ['/!|/G|American Styles'], test_groups)
True
>>> check_against_filter(test_tags_5, ['/!|/G|American Styles'], test_groups)
True
>>> check_against_filter(test_tags_6, ['/!|/G|American Styles'], test_groups)
True

And (/&|) Operator
------------------

* Single with tags.

>>> check_against_filter(test_tags_1, ['ale/&|tripel'], test_groups)
False
>>> check_against_filter(test_tags_2, ['ale/&|tripel'], test_groups)
False
>>> check_against_filter(test_tags_3, ['ale/&|tripel'], test_groups)
True
>>> check_against_filter(test_tags_4, ['ale/&|tripel'], test_groups)
False
>>> check_against_filter(test_tags_5, ['ale/&|tripel'], test_groups)
False
>>> check_against_filter(test_tags_6, ['ale/&|tripel'], test_groups)
False

* Multiple And's.

>>> check_against_filter(test_tags_1, ['ale/&|refrigerated/&|cascade'], test_groups)
False
>>> check_against_filter(test_tags_2, ['ale/&|refrigerated/&|cascade'], test_groups)
True
>>> check_against_filter(test_tags_3, ['ale/&|refrigerated/&|cascade'], test_groups)
False
>>> check_against_filter(test_tags_4, ['ale/&|refrigerated/&|cascade'], test_groups)
False
>>> check_against_filter(test_tags_5, ['ale/&|refrigerated/&|cascade'], test_groups)
False
>>> check_against_filter(test_tags_6, ['ale/&|refrigerated/&|cascade'], test_groups)
False

* Combinations of operators.

>>> check_against_filter(test_tags_1, ['/G|Beer/&|/!|dipa'], test_groups)
False
>>> check_against_filter(test_tags_2, ['/G|Beer/&|/!|dipa'], test_groups)
True
>>> check_against_filter(test_tags_3, ['/G|Beer/&|/!|dipa'], test_groups)
True
>>> check_against_filter(test_tags_4, ['/G|Beer/&|/!|dipa'], test_groups)
False
>>> check_against_filter(test_tags_5, ['/G|Beer/&|/!|dipa'], test_groups)
False
>>> check_against_filter(test_tags_6, ['/G|Beer/&|/!|dipa'], test_groups)
False
>>> check_against_filter(test_tags_1, ['/G|American Styles/&|/!|/*|'], test_groups)
False
>>> check_against_filter(test_tags_2, ['/G|American Styles/&|/!|/*|'], test_groups)
False
>>> check_against_filter(test_tags_3, ['/G|American Styles/&|/!|/*|'], test_groups)
False
>>> check_against_filter(test_tags_4, ['/G|American Styles/&|/!|/*|'], test_groups)
False
>>> check_against_filter(test_tags_5, ['/G|American Styles/&|/!|/*|'], test_groups)
False
>>> check_against_filter(test_tags_6, ['/G|American Styles/&|/!|/*|'], test_groups)
False

"Or" Operation Of Multiple Condition Sets
-----------------------------------------

Multiple condition sets work as if combined with an "or" operator.

>>> check_against_filter(test_tags_1, ['scotch', '/*|'], test_groups)
True
>>> check_against_filter(test_tags_2, ['scotch', '/*|'], test_groups)
True
>>> check_against_filter(test_tags_3, ['scotch', '/*|'], test_groups)
True
>>> check_against_filter(test_tags_4, ['scotch', '/*|'], test_groups)
True
>>> check_against_filter(test_tags_5, ['scotch', '/*|'], test_groups)
True
>>> check_against_filter(test_tags_6, ['scotch', '/*|'], test_groups)
True
>>> check_against_filter(test_tags_1, ['scotch', 'notag', 'ctz'], test_groups)
True
>>> check_against_filter(test_tags_2, ['scotch', 'notag', 'ctz'], test_groups)
False
>>> check_against_filter(test_tags_3, ['scotch', 'notag', 'ctz'], test_groups)
False
>>> check_against_filter(test_tags_4, ['scotch', 'notag', 'ctz'], test_groups)
True
>>> check_against_filter(test_tags_5, ['scotch', 'notag', 'ctz'], test_groups)
False
>>> check_against_filter(test_tags_6, ['scotch', 'notag', 'ctz'], test_groups)
False

"Bad" Cases
-----------

* Tag groups that don't exist.

>>> check_against_filter(test_tags_1, ['/G|nogroup'], test_groups)
False
>>> check_against_filter(test_tags_2, ['/G|nogroup'], test_groups)
False
>>> check_against_filter(test_tags_3, ['/G|nogroup'], test_groups)
False
>>> check_against_filter(test_tags_4, ['/G|nogroup'], test_groups)
False
>>> check_against_filter(test_tags_5, ['/G|nogroup'], test_groups)
False
>>> check_against_filter(test_tags_6, ['/G|nogroup'], test_groups)
False
>>> check_against_filter(test_tags_1, ['/!|/G|nogroup'], test_groups)
True
>>> check_against_filter(test_tags_2, ['/!|/G|nogroup'], test_groups)
True
>>> check_against_filter(test_tags_3, ['/!|/G|nogroup'], test_groups)
True
>>> check_against_filter(test_tags_4, ['/!|/G|nogroup'], test_groups)
True
>>> check_against_filter(test_tags_5, ['/!|/G|nogroup'], test_groups)
True
>>> check_against_filter(test_tags_6, ['/!|/G|nogroup'], test_groups)
True

* Bad operator order (should throw exception).

>>> check_against_filter(test_tags_1, ['/G|/!|thisiswrong'], test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition encountered: "/G|/!|thisiswrong"
>>> check_against_filter(test_tags_1, ['thisiswrong/*|'], test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition encountered: "thisiswrong/*|"
>>> check_against_filter(test_tags_1, ['thisiswrong/!|'], test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition encountered: "thisiswrong/!|"
