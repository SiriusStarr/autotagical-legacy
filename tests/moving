==================
autotagical.moving
==================

Setup
=====
Initialize structures, silence logging, and import all functions.

Logging
-------
Silence logging, as a lot of tests will deliberate do things that result in errors/warnings.

>>> import logging
>>> import sys
>>> logging.basicConfig(level=logging.CRITICAL)

Test Groups
-----------
Set up a basic tag groups object.

>>> from autotagical.groups import AutotagicalGroups
>>> test_groups = AutotagicalGroups()
>>> test_groups.load_tag_groups(
...   {
...     "file_type": "autotagical_tag_groups",
...     "tag_group_file_version": "1.1",
...     "tag_groups": [
...       {
...         "name": "American Styles",
...         "tags": [
...           "ipa",
...           "dipa",
...           "pale_ale"
...         ]
...       },
...       {
...         "name": "Belgian Styles",
...         "tags": [
...           "witbier",
...           "dubbel",
...           "tripel"
...         ]
...       },
...       {
...         "name": "Beer",
...         "tags": [
...           "/G|American Styles",
...           "/G|Belgian Styles"
...         ]
...       },
...       {
...         "name": "Whisky",
...         "tags": [
...           "bourbon",
...           "rye",
...           "scotch"
...         ]
...       }
...     ]
...   })
True
>>> test_groups.process_groups()

Test Files
----------
>>> from autotagical.file_handler import AutotagicalFile
>>> import os
>>> test_file_1 = AutotagicalFile(
...   name='Test1999',
...   raw_name='Test1999[dipa ale refrigerated simcoe ctz centennial].txt',
...   original_path=os.path.join(os.path.dirname(sys.path[0]), 'tests', 'files', 'Test1999[dipa ale refrigerated simcoe ctz centennial].txt'),
...   extension='.txt',
...   tags='[dipa ale refrigerated simcoe ctz centennial]',
...   tag_array=['dipa', 'ale', 'refrigerated', 'simcoe', 'ctz', 'centennial']
... )
>>> test_file_2 = AutotagicalFile(
...   name='Test1532',
...   raw_name='Test1532[pale_ale ale refrigerated cascade].txt',
...   original_path=os.path.join(os.path.dirname(sys.path[0]), 'tests', 'files', 'Test1532[pale_ale ale refrigerated cascade].txt'),
...   extension='.txt',
...   tags='[pale_ale ale refrigerated cascade]',
...   tag_array=['pale_ale', 'ale', 'refrigerated', 'cascade']
... )
>>> test_file_3 = AutotagicalFile(
...   name='Affligem Tripel',
...   raw_name='Affligem Tripel[tripel ale refrigerated].txt',
...   original_path=os.path.join(os.path.dirname(sys.path[0]), 'tests', 'files', 'Affligem Tripel[tripel ale refrigerated].txt'),
...   extension='.txt',
...   tags='[tripel ale refrigerated]',
...   tag_array=['tripel', 'ale', 'refrigerated']
... )
>>> test_file_4 = AutotagicalFile(
...   name='also this',
...   raw_name='also this[scotch laphroaig islay].txt',
...   original_path=os.path.join(os.path.dirname(sys.path[0]), 'tests', 'files', 'also this[scotch laphroaig islay].txt'),
...   extension='.txt',
...   tags='[scotch laphroaig islay]',
...   tag_array = ['scotch', 'laphroaig', 'islay']
... )
>>> test_file_5 = AutotagicalFile(
...   name='Pappys Family Reserve',
...   raw_name='Pappys Family Reserve[bourbon 23_year pappys].txt',
...   original_path=os.path.join(os.path.dirname(sys.path[0]), 'tests', 'files', 'Pappys Family Reserve[bourbon 23_year pappys].txt'),
...   extension='.txt',
...   tags='[bourbon 23_year pappys]',
...   tag_array=['bourbon', '23_year', 'pappys']
... )
>>> test_file_6 = AutotagicalFile(
...   name='Water',
...   raw_name='Water[non-alcoholic refrigerated].txt',
...   original_path=os.path.join(os.path.dirname(sys.path[0]), 'tests', 'files', 'Water[non-alcoholic refrigerated].txt'),
...   extension='.txt',
...   tags='[non-alcoholic refrigerated]',
...   tag_array=['non-alcoholic', 'refrigerated']
... )
>>> files = [test_file_1, test_file_2, test_file_3, test_file_4, test_file_5, test_file_6]
>>> test_file_empty = AutotagicalFile(
...   name='',
...   raw_name='',
...   original_path='',
...   extension='',
...   tags='',
...   tag_array=[]
... )

Test Filters
------------
Set up filters for testing.

>>> filter_1 = {
...   "filter": ["/G|Beer"],
...   "subfolder": "Beer Bottles",
...   "sublevels": [
...     {
...       "filter": ["/G|Belgian Styles"],
...       "subfolder": "",
...       "sublevels": []
...     },
...     {
...       "filter": ["dipa"],
...       "subfolder": "DIPAs",
...       "sublevels": [
...         {
...           "filter": ["motueka"],
...           "subfolder": "Motueka",
...           "sublevels": []
...         }
...       ]
...     }
...   ]
... }
>>> filter_2 = {
...   "filter": ["/G|Whisky"],
...   "subfolder": "Whisky Bottles",
...   "sublevels": [
...     {
...       "filter": ["highland", "islay"],
...       "subfolder": "Scotch Bottles",
...       "sublevels": [
...         {
...           "filter": ["islay"],
...           "subfolder": "Islay",
...           "sublevels": []
...         }
...       ]
...     },
...     {
...       "filter": ["bourbon"],
...       "subfolder": "Bourbon Bottles",
...       "sublevels": []
...     }
...   ]
... }
>>> filter_3 = {
...   "filter": ["/G|Beer"],
...   "subfolder": "Beers",
...   "sublevels": [
...     {
...       "filter": ["/G|Belgian Styles"],
...       "subfolder": "Belgians",
...       "sublevels": []
...     },
...     {
...       "filter": ["tripel"],
...       "subfolder": "Tripels",
...       "sublevels": [
...         {
...           "filter": ["american"],
...           "subfolder": "",
...           "sublevels": []
...         },
...       ]
...     },
...     {
...       "filter": ["dipa"],
...       "subfolder": "DIPAs",
...       "sublevels": []
...     }
...   ]
... }
>>> filter_4 = {
...   "filter": ["/G|Beer"],
...   "subfolder": "Beers",
...   "sublevels": [
...     {
...       "filter": ["tripel"],
...       "subfolder": "Tripels",
...       "sublevels": [
...         {
...           "filter": ["american"],
...           "subfolder": "",
...           "sublevels": []
...         },
...       ]
...     },
...     {
...       "filter": ["/G|Belgian Styles"],
...       "subfolder": "Belgians",
...       "sublevels": []
...     },
...     {
...       "filter": ["/G|American Styles"],
...       "subfolder": "American Styles",
...       "sublevels": [
...         {
...           "filter": ["american_light_lager"],
...           "subfolder": "ALL",
...           "sublevels": []
...         }
...       ]
...     },
...     {
...       "filter": ["dipa"],
...       "subfolder": "DIPA Styles",
...       "sublevels": [
...         {
...           "filter": ["motueka"],
...           "subfolder": "Motueka",
...           "sublevels": []
...         }
...       ]
...     }
...   ]
... }
>>> filter_5 = {
...   "filter": ["/G|Beer"],
...   "subfolder": "Beers",
...   "sublevels": [
...     {
...       "filter": ["tripel"],
...       "subfolder": "Tripels",
...       "sublevels": []
...     },
...     {
...       "filter": ["/G|Belgian Styles"],
...       "subfolder": "Belgians",
...       "sublevels": []
...     },
...     {
...       "filter": ["dipa"],
...       "subfolder": "DIPA Styles",
...       "sublevels": [
...         {
...           "filter": ["motueka"],
...           "subfolder": "Motueka",
...           "sublevels": []
...         }
...       ]
...     },
...     {
...       "filter": ["/G|American Styles"],
...       "subfolder": "American Styles",
...       "sublevels": [
...         {
...           "filter": ["american_light_lager"],
...           "subfolder": "ALL",
...           "sublevels": []
...         }
...       ]
...     }
...   ]
... }
>>> filter_6 = {
...   "filter": ["/G|Beer"],
...   "subfolder": "Beers",
...   "sublevels": [
...     {
...       "filter": ["/G|Belgian Styles"],
...       "subfolder": "Belgians",
...       "sublevels": []
...     },
...     {
...       "filter": ["tripel"],
...       "subfolder": "Tripels",
...       "sublevels": []
...     },
...     {
...       "filter": ["dipa"],
...       "subfolder": "DIPA Styles",
...       "sublevels": [
...         {
...           "filter": ["motueka"],
...           "subfolder": "Motueka",
...           "sublevels": []
...         }
...       ]
...     },
...     {
...       "filter": ["/G|American Styles"],
...       "subfolder": "American Styles",
...       "sublevels": [
...         {
...           "filter": ["american_light_lager"],
...           "subfolder": "ALL",
...           "sublevels": []
...         }
...       ]
...     }
...   ]
... }

Import Functions
----------------

>>> from autotagical.moving import process_filter_level, generate_path, determine_destination

process_filter_level(tag_array, filter_level, tag_groups)
=========================================================

Takes a file's tag array and a single filter level and determines the contribution to path that it and all sublevels contribute by operating recursively.

Edge Cases
----------

* Empty Filter (should throw an exception)

>>> process_filter_level(test_file_1, {"filter": [""], "subfolder": "", "sublevels": []}, test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition set encountered: Completely empty!
>>> process_filter_level(test_file_1, {"filter": [], "subfolder": "", "sublevels": []}, test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed filter encountered: Completely empty!

* Empty Tags

>>> process_filter_level(test_file_empty, filter_1, test_groups)
(False, '')

* Both Empty

>>> process_filter_level(test_file_empty, {"filter": [""], "subfolder": "", "sublevels": []}, test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition set encountered: Completely empty!
>>> process_filter_level(test_file_empty, {"filter": [], "subfolder": "", "sublevels": []}, test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed filter encountered: Completely empty!
>>> process_filter_level(test_file_empty, {"filter": [""], "subfolder": "", "sublevels": []}, test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition set encountered: Completely empty!
>>> process_filter_level(test_file_empty, {"filter": [], "subfolder": "", "sublevels": []}, test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed filter encountered: Completely empty!

* Empty Tags with All (/\*|) operator

>>> process_filter_level(test_file_empty, {"filter": ["/*|"], "subfolder": "", "sublevels": []}, test_groups)
(True, '')

Base Cases
----------

* No matches at all

>>> process_filter_level(test_file_1, filter_2, test_groups)
(False, '')
>>> process_filter_level(test_file_2, filter_2, test_groups)
(False, '')
>>> process_filter_level(test_file_3, filter_2, test_groups)
(False, '')
>>> process_filter_level(test_file_4, filter_1, test_groups)
(False, '')
>>> process_filter_level(test_file_4, filter_3, test_groups)
(False, '')
>>> process_filter_level(test_file_5, filter_1, test_groups)
(False, '')
>>> process_filter_level(test_file_5, filter_3, test_groups)
(False, '')
>>> process_filter_level(test_file_6, filter_1, test_groups)
(False, '')
>>> process_filter_level(test_file_6, filter_2, test_groups)
(False, '')
>>> process_filter_level(test_file_6, filter_3, test_groups)
(False, '')

* Fully specified without subfolder

>>> process_filter_level(test_file_3, filter_1, test_groups) == (True, os.path.join('Beer Bottles'))
True

* Fully specified with subfolder

>>> process_filter_level(test_file_4, filter_2, test_groups) == (True, os.path.join('Whisky Bottles', 'Scotch Bottles', 'Islay'))
True
>>> process_filter_level(test_file_5, filter_2, test_groups) == (True, os.path.join('Whisky Bottles', 'Bourbon Bottles'))
True

* Not fully specified

>>> process_filter_level(test_file_1, filter_1, test_groups) == (False, os.path.join('Beer Bottles', 'DIPAs'))
True
>>> process_filter_level(test_file_2, filter_1, test_groups) == (False, os.path.join('Beer Bottles'))
True

Format Strings
--------------

* /FILE| operator

>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "A /FILE| operator.", "sublevels": [{"filter": ["/*|"], "subfolder": "Another /FILE| operator.", "sublevels": []}]}, test_groups) == (True, os.path.join('A Test1999 operator.', 'Another Test1999 operator.'))
True

* /?TIG| operator

>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "A /?TIG|American Styles/| operator.", "sublevels": [{"filter": ["/*|"], "subfolder": "Another /?TIG|Whisky/| operator.", "sublevels": []}]}, test_groups) == (True, os.path.join('A dipa operator.', 'Another  operator.'))
True

* /PP| operator

>>> process_filter_level(test_file_2, {"filter": ["/*|"], "subfolder": "/PP|A /?TIG|American Styles/| operator.", "sublevels": [{"filter": ["/*|"], "subfolder": "Another /?TIG|Whisky/| operator.", "sublevels": []}]}, test_groups) == (True, os.path.join('A Pale Ale Operator.', 'Another  operator.'))
True

* /PP-| operator

>>> process_filter_level(test_file_2, {"filter": ["/*|"], "subfolder": "/PP|A /?TIG|American Styles/| hyphen-operator.", "sublevels": [{"filter": ["/*|"], "subfolder": "Another /?TIG|Whisky/| operator.", "sublevels": []}]}, test_groups) == (True, os.path.join('A Pale Ale Hyphen-Operator.', 'Another  operator.'))
True

>>> process_filter_level(test_file_2, {"filter": ["/*|"], "subfolder": "/PP-|A /?TIG|American Styles/| hyphen-operator.", "sublevels": [{"filter": ["/*|"], "subfolder": "Another /?TIG|Whisky/| operator.", "sublevels": []}]}, test_groups) == (True, os.path.join('A Pale Ale Hyphen Operator.', 'Another  operator.'))
True

* /EXT| operator

>>> process_filter_level(test_file_2, {"filter": ["/*|"], "subfolder": "A /EXT| operator.", "sublevels": [{"filter": ["/*|"], "subfolder": "Another /EXT| operator.", "sublevels": []}]}, test_groups) == (True, os.path.join('A .txt operator.', 'Another .txt operator.'))
True

* /TAGS| operator

>>> process_filter_level(test_file_2, {"filter": ["/*|"], "subfolder": "A /TAGS| operator.", "sublevels": [{"filter": ["/*|"], "subfolder": "Another /TAGS| operator.", "sublevels": []}]}, test_groups) == (True, os.path.join('A [pale_ale ale refrigerated cascade] operator.', 'Another [pale_ale ale refrigerated cascade] operator.'))
True

* Tag conditionals

>>> process_filter_level(test_file_4, {"filter": ["/*|"], "subfolder": "A /?T|scotch/| operator.", "sublevels": [{"filter": ["/*|"], "subfolder": "Another /?T|dipa/| operator.", "sublevels": []}]}, test_groups) == (True, os.path.join('A scotch operator.', 'Another  operator.'))
True

* Group conditionals

>>> process_filter_level(test_file_5, {"filter": ["/*|"], "subfolder": "A /?G|Whisky/| operator.", "sublevels": [{"filter": ["/*|"], "subfolder": "Another /?G|American Styles/| operator.", "sublevels": []}]}, test_groups) == (True, os.path.join('A Whisky operator.', 'Another  operator.'))
True

* Conditional operator

>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "A /?|scotch/T|true/F|false/E?| operator.", "sublevels": [{"filter": ["/*|"], "subfolder": "Another /?|dipa/T|true/F|false/E?| operator.", "sublevels": []}]}, test_groups) == (True, os.path.join('A false operator.', 'Another true operator.'))
True

* Complex conditions

>>> complex_filter = '/G|American Styles/&|/!|dipa'
>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "This is a /?|" + complex_filter + "/T|y/F|n/E?| conditional operator.", "sublevels": []}, test_groups) == (True, os.path.join('This is a n conditional operator.'))
True

>>> process_filter_level(test_file_2, {"filter": ["/*|"], "subfolder": "This is a /?|" + complex_filter + "/T|y/F|n/E?| conditional operator.", "sublevels": []}, test_groups) == (True, os.path.join('This is a y conditional operator.'))
True

>>> process_filter_level(test_file_4, {"filter": ["/*|"], "subfolder": "This is a /?|" + complex_filter + "/T|y/F|n/E?| conditional operator.", "sublevels": []}, test_groups) == (True, os.path.join('This is a n conditional operator.'))
True

* Combination of conditionals

>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "This is a /?G|American Styles/| group and /?T|dipa/| tag operator.", "sublevels": []}, test_groups) == (True, os.path.join('This is a American Styles group and dipa tag operator.'))
True

>>> process_filter_level(test_file_2, {"filter": ["/*|"], "subfolder": "This is a /?G|American Styles/| group and /?T|dipa/| tag operator.", "sublevels": []}, test_groups) == (True, os.path.join('This is a American Styles group and  tag operator.'))
True

>>> process_filter_level(test_file_4, {"filter": ["/*|"], "subfolder": "This is a /?G|American Styles/| group and /?T|dipa/| tag operator.", "sublevels": []}, test_groups) == (True, os.path.join('This is a  group and  tag operator.'))
True


* Complex Combinations

>>> complex_filter = '/G|American Styles/&|/!|dipa'
>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "This is a /?|" + complex_filter + "/T|/TAGS|/F|/EXT|/E?| conditional operator.", "sublevels": []}, test_groups) == (True, os.path.join('This is a .txt conditional operator.'))
True

>>> process_filter_level(test_file_2, {"filter": ["/*|"], "subfolder": "This is a /?|" + complex_filter + "/T|/EXT|/F|/FILE|/E?| conditional operator.", "sublevels": []}, test_groups) == (True, os.path.join('This is a .txt conditional operator.'))
True

>>> process_filter_level(test_file_4, {"filter": ["/*|"], "subfolder": "This is a /?|" + complex_filter + "/T|/TAGS|/F|/EXT|/E?| conditional operator.", "sublevels": []}, test_groups) == (True, os.path.join('This is a .txt conditional operator.'))
True

* Subfolder operator

>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "American Styles//|/?TIG|American Styles/| Folder", "sublevels": []}, test_groups) == (True, os.path.join('American Styles', 'dipa Folder'))
True
>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "American Styles//|/?TIG|Whisky/| Folder", "sublevels": []}, test_groups) == (True, os.path.join('American Styles', ' Folder'))
True
>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "American Styles//|/?TIG|Whisky/|", "sublevels": []}, test_groups) == (True, os.path.join('American Styles'))
True
>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "//|American Styles//|/?TIG|American Styles/| Folder//|", "sublevels": []}, test_groups) == (True, os.path.join('American Styles', 'dipa Folder'))
True
>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "//|American Styles//|/?TIG|American Styles/| Folder//| ", "sublevels": []}, test_groups) == (True, os.path.join('American Styles', 'dipa Folder', ' '))
True

* Bad Case

>>> process_filter_level(test_file_1, {"filter": ["/*|"], "subfolder": "This is a bad /ITER|bad /#| bad/EITER| format string.", "sublevels": []}, test_groups) == (True, os.path.join('This is a bad  format string.'))
True

Filter Priority
---------------

Confirm filter priority works

* Full match over partial

>>> process_filter_level(test_file_3, filter_3, test_groups) == (True, os.path.join('Beers', 'Belgians'))
True
>>> process_filter_level(test_file_3, filter_4, test_groups) == (True, os.path.join('Beers', 'Belgians'))
True

* For full matches

>>> process_filter_level(test_file_3, filter_5, test_groups) == (True, os.path.join('Beers', 'Tripels'))
True
>>> process_filter_level(test_file_3, filter_6, test_groups) == (True, os.path.join('Beers', 'Belgians'))
True

* For partial matches

>>> process_filter_level(test_file_1, filter_4, test_groups) == (False, os.path.join('Beers', 'American Styles'))
True
>>> process_filter_level(test_file_1, filter_5, test_groups) == (False, os.path.join('Beers', 'DIPA Styles'))
True

generate_path(tag_array, movement_schema, tag_groups)
=====================================================

Takes a file's tag array and determines how to organize it according to a movement schema.

Edge Cases
----------

* Empty Filter (should throw an exception)

>>> generate_path(test_file_1, [{"filter": [""], "subfolder": "", "sublevels": []}], test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition set encountered: Completely empty!
>>> generate_path(test_file_1, [{"filter": [], "subfolder": "", "sublevels": []}], test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed filter encountered: Completely empty!

* Empty Tags

>>> generate_path(test_file_empty, [filter_1, filter_2], test_groups)
(True, '')

* Both Empty

>>> generate_path(test_file_empty, [{"filter": [""], "subfolder": "", "sublevels": []}], test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition set encountered: Completely empty!
>>> generate_path(test_file_empty, [{"filter": [], "subfolder": "", "sublevels": []}], test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed filter encountered: Completely empty!
>>> generate_path(test_file_empty, [{"filter": [""], "subfolder": "", "sublevels": []}], test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed condition set encountered: Completely empty!
>>> generate_path(test_file_empty, [{"filter": [], "subfolder": "", "sublevels": []}], test_groups)
Traceback (most recent call last):
    ...
autotagical.filtering.FilterError: Malformed filter encountered: Completely empty!
>>> generate_path(test_file_empty, [], test_groups)
Traceback (most recent call last):
    ...
autotagical.schema.SchemaError: Completely empty movement schema!
>>> generate_path(test_file_empty, [], test_groups)
Traceback (most recent call last):
    ...
autotagical.schema.SchemaError: Completely empty movement schema!


* Empty Tags with All (/\*|) operator

>>> generate_path(test_file_empty, [{"filter": ["/*|"], "subfolder": "", "sublevels": []}], test_groups)
(False, '')
>>> generate_path(test_file_empty, [{"filter": ["/*|"], "subfolder": "", "sublevels": []}], test_groups)
(False, '')

Base Cases
----------

* No matches at all

>>> generate_path(test_file_1, [filter_2], test_groups)
(True, '')
>>> generate_path(test_file_2, [filter_2], test_groups)
(True, '')
>>> generate_path(test_file_3, [filter_2], test_groups)
(True, '')
>>> generate_path(test_file_4, [filter_1], test_groups)
(True, '')
>>> generate_path(test_file_5, [filter_1], test_groups)
(True, '')
>>> generate_path(test_file_6, [filter_1], test_groups)
(True, '')
>>> generate_path(test_file_6, [filter_2], test_groups)
(True, '')

* Fully specified without subfolder

>>> generate_path(test_file_3, [filter_1, filter_2], test_groups) == (False, os.path.join('Beer Bottles'))
True

* Fully specified with subfolder

>>> generate_path(test_file_4, [filter_1, filter_2], test_groups) == (False, os.path.join('Whisky Bottles', 'Scotch Bottles', 'Islay'))
True
>>> generate_path(test_file_5, [filter_1, filter_2], test_groups) == (False, os.path.join('Whisky Bottles', 'Bourbon Bottles'))
True

* Not fully specified

>>> generate_path(test_file_1, [filter_1, filter_2], test_groups) == (False, os.path.join('Beer Bottles', 'DIPAs'))
True
>>> generate_path(test_file_2, [filter_1, filter_2], test_groups) == (False, os.path.join('Beer Bottles'))
True

Filter Priority
---------------

Confirm filter priority works

* Full match over partial

>>> generate_path(test_file_1, [filter_1, filter_2, filter_3], test_groups) == (False, os.path.join('Beers', 'DIPAs'))
True
>>> generate_path(test_file_1, [filter_3, filter_2, filter_1], test_groups) == (False, os.path.join('Beers', 'DIPAs'))
True

* For full matches

>>> generate_path(test_file_3, [filter_1, filter_2, filter_3], test_groups) == (False, os.path.join('Beer Bottles'))
True
>>> generate_path(test_file_3, [filter_3, filter_2, filter_1], test_groups) == (False, os.path.join('Beers', 'Belgians'))
True

* For partial matches

>>> generate_path(test_file_1, [filter_1, filter_2, filter_4], test_groups) == (False, os.path.join('Beer Bottles', 'DIPAs'))
True
>>> generate_path(test_file_1, [filter_4, filter_2, filter_1], test_groups) == (False, os.path.join('Beers', 'American Styles'))
True

determine_destination(file_list, movement_schema, tag_groups)
=============================================================
Takes a list of files and processes how they should be organized in directories according to a
schema.

Edge Cases
----------

* Empty file list

>>> determine_destination([], [filter_1, filter_2], test_groups)
[]

* Empty filter

>>> determine_destination(files, [], test_groups)
Traceback (most recent call last):
    ...
autotagical.schema.SchemaError: Completely empty movement schema!

* Both empty (returns empty list, because why fail if you don't have to)

>>> determine_destination([], [], test_groups)
[]

Normal Function
---------------

>>> output = determine_destination(files, [filter_1, filter_2], test_groups)
>>> for f in output:
...     print(f) #doctest: +ELLIPSIS
-----File-----
  Destination: "Beer Bottles...DIPAs"
  Extension: ".txt"
  Move Failed: False
  Name: "Test1999"
  Original Path: "...tests...files...Test1999[dipa ale refrigerated simcoe ctz centennial].txt"
  Output Name: "Test1999[dipa ale refrigerated simcoe ctz centennial].txt"
  Raw Name: "Test1999[dipa ale refrigerated simcoe ctz centennial].txt"
  Rename Failed: False
  Tags: "[dipa ale refrigerated simcoe ctz centennial]"
  Tag Array: ['dipa', 'ale', 'refrigerated', 'simcoe', 'ctz', 'centennial']
-----End File-----
-----File-----
  Destination: "Beer Bottles"
  Extension: ".txt"
  Move Failed: False
  Name: "Test1532"
  Original Path: "...tests...files...Test1532[pale_ale ale refrigerated cascade].txt"
  Output Name: "Test1532[pale_ale ale refrigerated cascade].txt"
  Raw Name: "Test1532[pale_ale ale refrigerated cascade].txt"
  Rename Failed: False
  Tags: "[pale_ale ale refrigerated cascade]"
  Tag Array: ['pale_ale', 'ale', 'refrigerated', 'cascade']
-----End File-----
-----File-----
  Destination: "Beer Bottles"
  Extension: ".txt"
  Move Failed: False
  Name: "Affligem Tripel"
  Original Path: "...tests...files...Affligem Tripel[tripel ale refrigerated].txt"
  Output Name: "Affligem Tripel[tripel ale refrigerated].txt"
  Raw Name: "Affligem Tripel[tripel ale refrigerated].txt"
  Rename Failed: False
  Tags: "[tripel ale refrigerated]"
  Tag Array: ['tripel', 'ale', 'refrigerated']
-----End File-----
-----File-----
  Destination: "Whisky Bottles...Scotch Bottles...Islay"
  Extension: ".txt"
  Move Failed: False
  Name: "also this"
  Original Path: "...tests...files...also this[scotch laphroaig islay].txt"
  Output Name: "also this[scotch laphroaig islay].txt"
  Raw Name: "also this[scotch laphroaig islay].txt"
  Rename Failed: False
  Tags: "[scotch laphroaig islay]"
  Tag Array: ['scotch', 'laphroaig', 'islay']
-----End File-----
-----File-----
  Destination: "Whisky Bottles...Bourbon Bottles"
  Extension: ".txt"
  Move Failed: False
  Name: "Pappys Family Reserve"
  Original Path: "...tests...files...Pappys Family Reserve[bourbon 23_year pappys].txt"
  Output Name: "Pappys Family Reserve[bourbon 23_year pappys].txt"
  Raw Name: "Pappys Family Reserve[bourbon 23_year pappys].txt"
  Rename Failed: False
  Tags: "[bourbon 23_year pappys]"
  Tag Array: ['bourbon', '23_year', 'pappys']
-----End File-----
-----File-----
  Destination: ""
  Extension: ".txt"
  Move Failed: True
  Name: "Water"
  Original Path: "...tests...files...Water[non-alcoholic refrigerated].txt"
  Output Name: "Water[non-alcoholic refrigerated].txt"
  Raw Name: "Water[non-alcoholic refrigerated].txt"
  Rename Failed: False
  Tags: "[non-alcoholic refrigerated]"
  Tag Array: ['non-alcoholic', 'refrigerated']
-----End File-----
